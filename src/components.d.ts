/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { CheckboxProperty } from "./components/checkbox";
import { DatepickerProperty } from "./components/datepicker";
import { EditorProperty } from "./components/editor";
import { InputProperty } from "./components/input";
import { RadioProperty } from "./components/radio";
import { SelectProperty } from "./components/select";
import { TextareaProperty } from "./components/textarea";
import { ToggleProperty } from "./components/toggle";
export namespace Components {
    interface VfCheckbox {
        "field": CheckboxProperty;
    }
    interface VfDatepicker {
        "field": DatepickerProperty;
    }
    interface VfEditor {
        "field": EditorProperty;
    }
    interface VfInput {
        "field": InputProperty;
    }
    interface VfRadio {
        "field": RadioProperty;
    }
    interface VfSelect {
        "field": SelectProperty;
    }
    interface VfTextarea {
        "field": TextareaProperty;
    }
    interface VfToggle {
        "field": ToggleProperty;
    }
}
declare global {
    interface HTMLVfCheckboxElement extends Components.VfCheckbox, HTMLStencilElement {
    }
    var HTMLVfCheckboxElement: {
        prototype: HTMLVfCheckboxElement;
        new (): HTMLVfCheckboxElement;
    };
    interface HTMLVfDatepickerElement extends Components.VfDatepicker, HTMLStencilElement {
    }
    var HTMLVfDatepickerElement: {
        prototype: HTMLVfDatepickerElement;
        new (): HTMLVfDatepickerElement;
    };
    interface HTMLVfEditorElement extends Components.VfEditor, HTMLStencilElement {
    }
    var HTMLVfEditorElement: {
        prototype: HTMLVfEditorElement;
        new (): HTMLVfEditorElement;
    };
    interface HTMLVfInputElement extends Components.VfInput, HTMLStencilElement {
    }
    var HTMLVfInputElement: {
        prototype: HTMLVfInputElement;
        new (): HTMLVfInputElement;
    };
    interface HTMLVfRadioElement extends Components.VfRadio, HTMLStencilElement {
    }
    var HTMLVfRadioElement: {
        prototype: HTMLVfRadioElement;
        new (): HTMLVfRadioElement;
    };
    interface HTMLVfSelectElement extends Components.VfSelect, HTMLStencilElement {
    }
    var HTMLVfSelectElement: {
        prototype: HTMLVfSelectElement;
        new (): HTMLVfSelectElement;
    };
    interface HTMLVfTextareaElement extends Components.VfTextarea, HTMLStencilElement {
    }
    var HTMLVfTextareaElement: {
        prototype: HTMLVfTextareaElement;
        new (): HTMLVfTextareaElement;
    };
    interface HTMLVfToggleElement extends Components.VfToggle, HTMLStencilElement {
    }
    var HTMLVfToggleElement: {
        prototype: HTMLVfToggleElement;
        new (): HTMLVfToggleElement;
    };
    interface HTMLElementTagNameMap {
        "vf-checkbox": HTMLVfCheckboxElement;
        "vf-datepicker": HTMLVfDatepickerElement;
        "vf-editor": HTMLVfEditorElement;
        "vf-input": HTMLVfInputElement;
        "vf-radio": HTMLVfRadioElement;
        "vf-select": HTMLVfSelectElement;
        "vf-textarea": HTMLVfTextareaElement;
        "vf-toggle": HTMLVfToggleElement;
    }
}
declare namespace LocalJSX {
    interface VfCheckbox {
        "field"?: CheckboxProperty;
        "onEventChange"?: (event: CustomEvent<CheckboxProperty>) => void;
        "onEventClick"?: (event: CustomEvent<CheckboxProperty>) => void;
        "onEventInvalid"?: (event: CustomEvent<CheckboxProperty>) => void;
    }
    interface VfDatepicker {
        "field"?: DatepickerProperty;
        "onEventBlur"?: (event: CustomEvent<DatepickerProperty>) => void;
        "onEventChange"?: (event: CustomEvent<DatepickerProperty>) => void;
        "onEventClick"?: (event: CustomEvent<DatepickerProperty>) => void;
        "onEventClose"?: (event: CustomEvent<DatepickerProperty>) => void;
        "onEventDraw"?: (event: CustomEvent<DatepickerProperty>) => void;
        "onEventFocus"?: (event: CustomEvent<DatepickerProperty>) => void;
        "onEventInput"?: (event: CustomEvent<DatepickerProperty>) => void;
        "onEventInvalid"?: (event: CustomEvent<DatepickerProperty>) => void;
        "onEventOpen"?: (event: CustomEvent<DatepickerProperty>) => void;
    }
    interface VfEditor {
        "field"?: EditorProperty;
        "onEventBlur"?: (event: CustomEvent<EditorProperty>) => void;
        "onEventChange"?: (event: CustomEvent<EditorProperty>) => void;
        "onEventClick"?: (event: CustomEvent<EditorProperty>) => void;
        "onEventFocus"?: (event: CustomEvent<EditorProperty>) => void;
    }
    interface VfInput {
        "field"?: InputProperty;
        "onEventBlur"?: (event: CustomEvent<InputProperty>) => void;
        "onEventChange"?: (event: CustomEvent<InputProperty>) => void;
        "onEventClick"?: (event: CustomEvent<InputProperty>) => void;
        "onEventFocus"?: (event: CustomEvent<InputProperty>) => void;
        "onEventInput"?: (event: CustomEvent<InputProperty>) => void;
        "onEventInvalid"?: (event: CustomEvent<InputProperty>) => void;
    }
    interface VfRadio {
        "field"?: RadioProperty;
        "onEventChange"?: (event: CustomEvent<RadioProperty>) => void;
        "onEventClick"?: (event: CustomEvent<RadioProperty>) => void;
        "onEventInvalid"?: (event: CustomEvent<RadioProperty>) => void;
    }
    interface VfSelect {
        "field"?: SelectProperty;
        "onEventChange"?: (event: CustomEvent<SelectProperty>) => void;
        "onEventClick"?: (event: CustomEvent<SelectProperty>) => void;
        "onEventInvalid"?: (event: CustomEvent<SelectProperty>) => void;
    }
    interface VfTextarea {
        "field"?: TextareaProperty;
        "onEventBlur"?: (event: CustomEvent<TextareaProperty>) => void;
        "onEventChange"?: (event: CustomEvent<TextareaProperty>) => void;
        "onEventClick"?: (event: CustomEvent<TextareaProperty>) => void;
        "onEventFocus"?: (event: CustomEvent<TextareaProperty>) => void;
        "onEventInput"?: (event: CustomEvent<TextareaProperty>) => void;
        "onEventInvalid"?: (event: CustomEvent<TextareaProperty>) => void;
    }
    interface VfToggle {
        "field"?: ToggleProperty;
        "onEventChange"?: (event: CustomEvent<ToggleProperty>) => void;
    }
    interface IntrinsicElements {
        "vf-checkbox": VfCheckbox;
        "vf-datepicker": VfDatepicker;
        "vf-editor": VfEditor;
        "vf-input": VfInput;
        "vf-radio": VfRadio;
        "vf-select": VfSelect;
        "vf-textarea": VfTextarea;
        "vf-toggle": VfToggle;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "vf-checkbox": LocalJSX.VfCheckbox & JSXBase.HTMLAttributes<HTMLVfCheckboxElement>;
            "vf-datepicker": LocalJSX.VfDatepicker & JSXBase.HTMLAttributes<HTMLVfDatepickerElement>;
            "vf-editor": LocalJSX.VfEditor & JSXBase.HTMLAttributes<HTMLVfEditorElement>;
            "vf-input": LocalJSX.VfInput & JSXBase.HTMLAttributes<HTMLVfInputElement>;
            "vf-radio": LocalJSX.VfRadio & JSXBase.HTMLAttributes<HTMLVfRadioElement>;
            "vf-select": LocalJSX.VfSelect & JSXBase.HTMLAttributes<HTMLVfSelectElement>;
            "vf-textarea": LocalJSX.VfTextarea & JSXBase.HTMLAttributes<HTMLVfTextareaElement>;
            "vf-toggle": LocalJSX.VfToggle & JSXBase.HTMLAttributes<HTMLVfToggleElement>;
        }
    }
}
